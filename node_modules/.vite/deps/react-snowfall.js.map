{
  "version": 3,
  "sources": ["../../react-fast-compare/index.js", "../../react-snowfall/src/Snowflake.ts", "../../react-snowfall/src/utils.ts", "../../react-snowfall/src/config.ts", "../../react-snowfall/src/SnowfallCanvas.ts", "../../react-snowfall/src/Snowfall.tsx", "../../react-snowfall/src/hooks.ts"],
  "sourcesContent": ["/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.3\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // START: Modifications:\n    // Apply guards for `Object.create(null)` handling. See:\n    // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n    // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();\n    // END: Modifications\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n", "import isEqual from 'react-fast-compare'\r\nimport { lerp, random, randomElement } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: CanvasImageSource[]\r\n  /**\r\n   * The minimum and maximum rotation speed of the snowflake (in degrees of\r\n   * rotation per frame).\r\n   *\r\n   * The rotation speed determines how quickly the snowflake rotates when\r\n   * an image is being rendered.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-1.0, 1.0]`.\r\n   */\r\n  rotationSpeed: [number, number]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n  rotationSpeed: [-1.0, 1.0],\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  rotationSpeed: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotationSpeed: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  private static offscreenCanvases = new WeakMap<CanvasImageSource, Record<number, HTMLCanvasElement>>()\r\n\r\n  /**\r\n   * A utility function to create a collection of snowflakes\r\n   * @param canvas The canvas element\r\n   * @param amount The number of snowflakes\r\n   * @param config The configuration for each snowflake\r\n   */\r\n  static createSnowflakes(canvas: HTMLCanvasElement | null, amount: number, config: SnowflakeConfig): Snowflake[] {\r\n    if (!canvas) return []\r\n\r\n    const snowflakes: Snowflake[] = []\r\n\r\n    for (let i = 0; i < amount; i++) {\r\n      snowflakes.push(new Snowflake(canvas, config))\r\n    }\r\n\r\n    return snowflakes\r\n  }\r\n\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: CanvasImageSource\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, rotationSpeed } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      rotationSpeed: random(...rotationSpeed),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n      nextRotationSpeed: random(...rotationSpeed),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5)\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    if (this.image) {\r\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed)\r\n    }\r\n  }\r\n\r\n  public update(offsetWidth: number, offsetHeight: number, framesPassed = 1): void {\r\n    const { x, y, rotation, rotationSpeed, nextRotationSpeed, wind, speed, nextWind, nextSpeed, radius } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % (offsetWidth + radius * 2)\r\n    if (this.params.x > offsetWidth + radius) this.params.x = -radius\r\n    this.params.y = (y + speed * framesPassed) % (offsetHeight + radius * 2)\r\n    if (this.params.y > offsetHeight + radius) this.params.y = -radius\r\n\r\n    // Apply rotation\r\n    if (this.image) {\r\n      this.params.rotation = (rotation + rotationSpeed) % 360\r\n    }\r\n\r\n    // Update the wind, speed and rotation towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private getImageOffscreenCanvas(image: CanvasImageSource, size: number): CanvasImageSource {\r\n    if (image instanceof HTMLImageElement && image.loading) return image\r\n    let sizes = Snowflake.offscreenCanvases.get(image)\r\n\r\n    if (!sizes) {\r\n      sizes = {}\r\n      Snowflake.offscreenCanvases.set(image, sizes)\r\n    }\r\n\r\n    if (!(size in sizes)) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = size\r\n      canvas.height = size\r\n      canvas.getContext('2d')?.drawImage(image, 0, 0, size, size)\r\n      sizes[size] = canvas\r\n    }\r\n\r\n    return sizes[size] ?? image\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    const { x, y, rotation, radius } = this.params\r\n\r\n    if (this.image) {\r\n      const radian = (rotation * Math.PI) / 180\r\n      const cos = Math.cos(radian)\r\n      const sin = Math.sin(radian)\r\n\r\n      // Translate to the location that we will be drawing the snowflake, including any rotation that needs to be applied\r\n      // The arguments for setTransform are: a, b, c, d, e, f\r\n      // a (scaleX), b (skewY), c (skewX), d (scaleY), e (translateX), f (translateY)\r\n      ctx.setTransform(cos, sin, -sin, cos, x, y)\r\n\r\n      // Draw the image with the center of the image at the center of the current location\r\n      const image = this.getImageOffscreenCanvas(this.image, radius)\r\n      ctx.drawImage(image, -(radius / 2), -(radius / 2), radius, radius)\r\n    } else {\r\n      // Not using images so no need to use transforms, just draw an arc in the right location\r\n      ctx.beginPath()\r\n      ctx.arc(x, y, radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = this.config.color\r\n      ctx.fill()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n", "/**\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\n * @param min The minimum value\n * @param max The maximum value\n */\nexport function random(min: number, max: number): number {\n  const randomNumber = Math.random() * (max - min + 1) + min\n\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\n    return randomNumber\n  } else {\n    return Math.floor(randomNumber)\n  }\n}\n\n/**\n * Linear interpolation function to gradually step towards a target value\n * @param start The current value\n * @param end The target value\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\n */\nexport function lerp(start: number, end: number, normal: number) {\n  return (1 - normal) * start + normal * end\n}\n\n/**\n * Selects a random item from an array of inputs.\n *\n * @param items The array of items to choose from\n * @returns A random item selected from the array\n */\nexport function randomElement<T>(items: T[]): T {\n  const index = Math.floor(Math.random() * items.length)\n  return items[index]\n}\n\n/**\n * Gets the height and width of the provided HTML element\n * @param element The html element to measure\n */\nexport function getSize(element?: HTMLElement | null) {\n  if (!element) return { height: 0, width: 0 }\n\n  return {\n    height: element.offsetHeight,\n    width: element.offsetWidth,\n  }\n}\n", "export const snowfallBaseStyle: React.CSSProperties = {\n  pointerEvents: 'none',\n  backgroundColor: 'transparent',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n}\n\n// Target of 60 frames per second\nexport const targetFrameTime = 1000 / 60\n", "import Snowflake, { SnowflakeConfig, defaultConfig } from './Snowflake'\nimport { targetFrameTime } from './config'\n\nexport interface SnowfallCanvasConfig extends SnowflakeConfig {\n  /**\n   * The number of snowflakes to be rendered.\n   *\n   * The default value is 150.\n   */\n  snowflakeCount: number\n}\n\nexport class SnowfallCanvas {\n  private lastUpdate = Date.now()\n  private snowflakes: Snowflake[] = []\n  private config: SnowfallCanvasConfig\n\n  #ctx: CanvasRenderingContext2D | null\n  get ctx() {\n    return this.#ctx\n  }\n\n  #canvas: HTMLCanvasElement\n  get canvas() {\n    return this.#canvas\n  }\n  set canvas(canvas: HTMLCanvasElement) {\n    this.#canvas = canvas\n    this.#ctx = canvas.getContext('2d')\n  }\n\n  constructor(canvas: HTMLCanvasElement, config: Partial<SnowfallCanvasConfig>) {\n    this.#canvas = canvas\n    this.#ctx = canvas.getContext('2d')\n    this.config = { snowflakeCount: 150, ...defaultConfig, ...config }\n    this.snowflakes = []\n    this.snowflakes = Snowflake.createSnowflakes(canvas, config.snowflakeCount || 150, config)\n    this.play()\n  }\n\n  /**\n   * Updates the config used for the snowfall animation, if the number of snowflakes\n   * has changed then this will create new or remove existing snowflakes gracefully\n   * to retain the position of as many existing snowflakes as possible.\n   */\n  updateConfig(config: Partial<SnowfallCanvasConfig>) {\n    this.config = { ...this.config, ...config }\n\n    const sizeDifference = this.config.snowflakeCount - this.snowflakes.length\n\n    if (sizeDifference > 0) {\n      this.snowflakes = [...this.snowflakes, ...Snowflake.createSnowflakes(this.canvas, sizeDifference, config)]\n    }\n\n    if (sizeDifference < 0) {\n      this.snowflakes = this.snowflakes.slice(0, this.config.snowflakeCount)\n    }\n\n    this.snowflakes.forEach((snowflake) => snowflake.updateConfig(this.config))\n  }\n\n  /**\n   * Updates the location of each snowflake based on the number of frames passed then\n   * clears the canvas and draws each snowflake.\n   */\n  private render(framesPassed = 1) {\n    const { ctx, canvas, snowflakes } = this\n\n    const { offsetWidth, offsetHeight } = canvas\n\n    // Update the position of each snowflake\n    snowflakes.forEach((snowflake) => snowflake.update(offsetWidth, offsetHeight, framesPassed))\n\n    // Render them if the canvas is available\n    if (ctx) {\n      ctx.setTransform(1, 0, 0, 1, 0, 0)\n      ctx.clearRect(0, 0, offsetWidth, offsetHeight)\n\n      snowflakes.forEach((snowflake) => snowflake.draw(ctx))\n    }\n  }\n\n  private animationFrame: number | undefined\n\n  /**\n   * The animation loop, will calculate the time since the last render and update\n   * the position of the snowflakes appropriately before queueing another frame.\n   */\n  private loop() {\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\n    const now = Date.now()\n    const msPassed = Date.now() - this.lastUpdate\n    this.lastUpdate = now\n\n    // Frames that would have passed if running at 60 fps\n    const framesPassed = msPassed / targetFrameTime\n\n    this.render(framesPassed)\n\n    this.animationFrame = requestAnimationFrame(() => this.loop())\n  }\n\n  /** Start the animation playing. */\n  play() {\n    this.loop()\n  }\n\n  /** Pause the animation. */\n  pause() {\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame)\n      this.animationFrame = undefined\n    }\n  }\n}\n\nexport default SnowfallCanvas\n", "import React, { useEffect, useRef } from 'react'\r\nimport { SnowfallCanvas, SnowfallCanvasConfig } from './SnowfallCanvas'\r\nimport { defaultConfig } from './Snowflake'\r\nimport { useComponentSize, useDeepMemo, useSnowfallStyle } from './hooks'\r\n\r\nexport interface SnowfallProps extends Partial<SnowfallCanvasConfig> {\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nexport const Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  rotationSpeed = defaultConfig.rotationSpeed,\r\n  snowflakeCount = 150,\r\n  images,\r\n  style,\r\n}: SnowfallProps = {}): JSX.Element => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const canvasSize = useComponentSize(canvasRef)\r\n\r\n  const config = useDeepMemo<SnowfallCanvasConfig>({\r\n    color,\r\n    changeFrequency,\r\n    radius,\r\n    speed,\r\n    wind,\r\n    rotationSpeed,\r\n    images,\r\n    snowflakeCount,\r\n  })\r\n\r\n  // A reference to the config used for creating the initial instance\r\n  const configRef = useRef(config)\r\n\r\n  const snowfallCanvasRef = useRef<SnowfallCanvas>()\r\n\r\n  useEffect(() => {\r\n    if (!snowfallCanvasRef.current && canvasRef.current) {\r\n      snowfallCanvasRef.current = new SnowfallCanvas(canvasRef.current, configRef.current)\r\n    }\r\n\r\n    return () => {\r\n      snowfallCanvasRef.current?.pause()\r\n      snowfallCanvasRef.current = undefined\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (snowfallCanvasRef.current) {\r\n      snowfallCanvasRef.current.updateConfig(config)\r\n    }\r\n  }, [config])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      height={canvasSize.height}\r\n      width={canvasSize.width}\r\n      style={mergedStyle}\r\n      data-testid=\"SnowfallCanvas\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snowfall\r\n", "import { useCallback, useLayoutEffect, useEffect, useRef, useState, useMemo } from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport { snowfallBaseStyle } from './config'\r\nimport { getSize } from './utils'\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: React.RefObject<HTMLElement>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: React.CSSProperties): React.CSSProperties => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList) {\r\n  const ref = useRef<React.DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n"],
  "mappings": "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",
  "names": ["isEqual", "isEqual", "import_react", "import_react_fast_compare", "isEqual", "React"]
}
